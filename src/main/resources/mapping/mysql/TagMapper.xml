<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.neilren.neilren4j.modules.article.dao.TagDao">
    <resultMap id="BaseResultMap" type="com.neilren.neilren4j.modules.article.entity.Tag">
        <id column="id" jdbcType="BIGINT" property="id"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.neilren.neilren4j.modules.article.entity.Tag">
        <result column="en_name" jdbcType="LONGVARCHAR" property="enName"/>
        <result column="zh_name" jdbcType="LONGVARCHAR" property="zhName"/>
    </resultMap>
    <resultMap id="articleBaseResultMap" type="com.neilren.neilren4j.modules.article.entity.Article">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="article_type" jdbcType="INTEGER" property="articleType"/>
        <result column="views" jdbcType="BIGINT" property="views"/>
        <result column="article_dat" jdbcType="TIMESTAMP" property="articleDat"/>
        <result column="article_status" jdbcType="INTEGER" property="articleStatus"/>
    </resultMap>
    <resultMap extends="articleBaseResultMap" id="articleResultMapWithBLOBs"
               type="com.neilren.neilren4j.modules.article.entity.ArticleWithBLOBs">
        <result column="source_url" jdbcType="LONGVARCHAR" property="sourceUrl"/>
        <result column="author" jdbcType="LONGVARCHAR" property="author"/>
        <result column="author_url" jdbcType="LONGVARCHAR" property="authorUrl"/>
        <result column="title" jdbcType="LONGVARCHAR" property="title"/>
        <result column="keyword" jdbcType="LONGVARCHAR" property="keyword"/>
        <result column="describes" jdbcType="LONGVARCHAR" property="describes"/>
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
    </resultMap>
    <sql id="Base_Column_List">
    id
  </sql>
    <sql id="Blob_Column_List">
    en_name, zh_name
  </sql>
    <select id="selectByTagLimit" parameterType="java.util.Map" resultMap="articleResultMapWithBLOBs">
        SELECT
          t1.zh_name,
          t_article.*,
          comment
        FROM (SELECT
                t_article_tag.article_id,
                t_tag.zh_name
              FROM t_article_tag
                LEFT JOIN t_tag ON t_article_tag.tag_id = t_tag.id
              WHERE t_tag.en_name = #{tag,jdbcType=LONGVARCHAR}) t1
          LEFT JOIN t_article ON t1.article_id = t_article.id
          /*连接文章评论表*/
          LEFT JOIN (
          SELECT
          article_id,
          COUNT(1) AS 'comment'
          FROM t_comments
          WHERE approved = 1
          GROUP BY article_id
          ) article_comment ON t_article.id = article_comment.article_id
        ORDER BY t_article.article_dat DESC
        LIMIT #{index,jdbcType=INTEGER}, #{size,jdbcType=INTEGER};
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from t_tag
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectAllTag" resultMap="ResultMapWithBLOBs">
    select
    t_tag.id,t_tag.en_name,t_tag.zh_name
    FROM (SELECT
    tag_id,
    count(tag_id) AS count_tag_id
    FROM
    t_article_tag
    GROUP BY tag_id
    ORDER BY count_tag_id DESC) t
    LEFT JOIN
    t_tag
    ON t.tag_id = t_tag.id;
  </select>
    <select id="selectArticleTotal" parameterType="String" resultType="Integer">
        SELECT
         COUNT(1) AS con
        FROM (SELECT
                t_article_tag.article_id,
                t_tag.zh_name
              FROM t_article_tag
                LEFT JOIN t_tag ON t_article_tag.tag_id = t_tag.id
              WHERE t_tag.en_name = #{_parameter}) t1
          LEFT JOIN t_article ON t1.article_id = t_article.id;
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_tag
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.neilren.neilren4j.modules.article.entity.Tag">
    insert into t_tag (id, en_name, zh_name
      )
    values (#{id,jdbcType=BIGINT}, #{enName,jdbcType=LONGVARCHAR}, #{zhName,jdbcType=LONGVARCHAR}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.neilren.neilren4j.modules.article.entity.Tag">
        insert into t_tag
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="enName != null">
                en_name,
            </if>
            <if test="zhName != null">
                zh_name,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="enName != null">
                #{enName,jdbcType=LONGVARCHAR},
            </if>
            <if test="zhName != null">
                #{zhName,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.neilren.neilren4j.modules.article.entity.Tag">
        update t_tag
        <set>
            <if test="enName != null">
                en_name = #{enName,jdbcType=LONGVARCHAR},
            </if>
            <if test="zhName != null">
                zh_name = #{zhName,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.neilren.neilren4j.modules.article.entity.Tag">
    update t_tag
    set en_name = #{enName,jdbcType=LONGVARCHAR},
      zh_name = #{zhName,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>